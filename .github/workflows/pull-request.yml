name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  # REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  REGISTRY_IMAGE: ''
  BAKE_TARGET: build
  DOCKERHUB_USERNAME: ${{ github.actor }}
  RUNNER_ARM64: ubuntu-22.04-arm
  RUNNER_DEFAULT: ubuntu-22.04
  REGISTRY: ghcr.io

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create matrix
        id: platforms
        run: |
          echo "matrix=$(docker buildx bake ${{ env.BAKE_TARGET }} --print | jq -cr '.target | to_entries | map(.value.platforms[]) | unique')" >>${GITHUB_OUTPUT}

      - name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Rename meta bake definition file
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "${{ runner.temp }}/bake-meta.json"

      - name: Upload meta bake definition
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build:
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-22.04-arm' || 'ubuntu-22.04' }}
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        id: bake
        uses: docker/bake-action@v6
        env:
          NO_TAG: true
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/bake-meta.json
          targets: ${{ env.BAKE_TARGET }}
          set: |
            ${{ env.REGISTRY_IMAGE != '' && format('*.tags={0}', env.REGISTRY_IMAGE) || '' }}
            *.platform=${{ matrix.platform }}
            *.output=type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export container digests
        run: |
          mkdir -p ${{ runner.temp }}/digests
          echo '${{ steps.bake.outputs.metadata }}' | jq 'with_entries(select(.key | startswith("build-"))) | map_values({name: ."image.name", digests: [."containerimage.digest"]})' > ${{ runner.temp }}/digests/${{ env.PLATFORM_PAIR }}.json

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-22.04
    needs:
      - build
    steps:
      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          ls -al ${{ runner.temp }}/digests
          cat ${{ runner.temp }}/digests/*
          jq -s '
            reduce .[] as $doc ({};
              reduce ($doc|to_entries[]) as $kv (
                .;
                .[$kv.key].name    = $kv.value.name
                | .[$kv.key].digests = ((.[$kv.key].digests // []) + $kv.value.digests)
              )
            )
          ' ${{ runner.temp }}/digests/*.json > ${{ runner.temp }}/digests/all.json
          cat ${{ runner.temp }}/digests/all.json
          cat ${{ runner.temp }}/bake-meta.json
          JSON_FILE=${{ runner.temp }}/digests/all.json
          for key in $(jq -r 'keys[]' "$JSON_FILE"); do
            image_name=$(jq -r ".\"$key\".name" "$JSON_FILE")
            image_digests=$(jq -r ".\"$key\".digests[]" "$JSON_FILE" | while read -r digest; do echo "${image_name}@${digest} "; done)
            image_tags=$(jq -cr '(.target."docker-metadata-action".tags // [] ) | map("-t " + sub(".*:"; "${image_name}:")) | join(" ")' ${{ runner.temp }}/bake-meta.json)
            echo "Creating manifest for image: $image_name"
            echo "Tags: $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${image_name}")) | "-t " + .) | join(" ")' ${{ runner.temp }}/bake-meta.json)"
            docker buildx imagetools create \
              ${image_tags} \
              ${image_digests}
          done

      - name: Inspect image
        working-directory: ${{ runner.temp }}/digests
        run: |
          JSON_FILE=${{ runner.temp }}/digests/all.json
          for key in $(jq -r 'keys[]' "$JSON_FILE"); do
            image_name=$(jq -r ".\"$key\".name" "$JSON_FILE")
            docker buildx imagetools inspect ${image_name}:$(jq -r '.target."docker-metadata-action".args.DOCKER_META_VERSION' ${{ runner.temp }}/bake-meta.json)
          done
