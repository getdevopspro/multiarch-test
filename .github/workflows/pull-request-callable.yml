name: Pull Request Build

on:
  workflow_call:
    secrets:
      registry-password:
        description: 'Password or token for registry login'
        required: true
    inputs:
      registry-image:
        description: 'Container registry + image prefix (e.g. ghcr.io/org/repo)'
        required: false
        type: string
      bake-target:
        description: 'Target name for `docker buildx bake`'
        required: false
        type: string
        default: 'build'
      registry-username:
        description: 'Username for registry login'
        required: true
        type: string
      runner-arm64:
        description: 'Runner label for ARM64 jobs'
        required: false
        type: string
        default: 'ubuntu-22.04-arm'
      runner-default:
        description: 'Runner label for nonâ€‘ARM jobs'
        required: false
        type: string
        default: 'ubuntu-22.04'
      registry:
        description: 'Docker registry domain'
        required: false
        type: string
        default: 'ghcr.io'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  prepare:
    runs-on: ${{ inputs.runner-default }}
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Prepare matrix & metadata
        id: prepare
        uses: ./.github/actions/buildx-bake/prepare
        with:
          bake-target: ${{ inputs.bake-target }}
          registry-image: ${{ inputs.registry-image }}

  build:
    needs: prepare
    runs-on: ${{ matrix.platform == 'linux/arm64' && inputs.runner-arm64 || inputs.runner-default }}
    strategy:
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - uses: ./.github/actions/build
        with:
          bake-target: ${{ inputs.bake-target }}
          registry-image: ${{ inputs.registry }}
          registry-username: ${{ inputs.registry-username }}
          registry-password: ${{ secrets.registry-password }}

  merge:
    needs: build
    runs-on: ${{ inputs.runner-default }}
    steps:
      - name: Download meta bake file
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}

      - name: Download all digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry-username }}
          password: ${{ secrets.registry-password }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest lists & push
        working-directory: ${{ runner.temp }}/digests
        run: |
          JSON_FILE=${{ runner.temp }}/digests/all.json
          jq -s '
            reduce .[] as $doc ({};
              reduce ($doc|to_entries[]) as $kv (
                .;
                .[$kv.key].name    = $kv.value.name
                | .[$kv.key].digests = ((.[$kv.key].digests // []) + $kv.value.digests)
              )
            )
          ' ${{ runner.temp }}/digests/*.json > ${JSON_FILE}
          for key in $(jq -r 'keys[]' "$JSON_FILE"); do
            image_name=$(jq -r ".\"$key\".name" "$JSON_FILE")
            image_digests=$(jq -r ".\"$key\".digests[]" "$JSON_FILE" | while read -r digest; do echo "${image_name}@${digest} "; done)
            image_tags=$(jq -cr '(.target."docker-metadata-action".tags // [] ) | map("-t '${image_name}':" + sub(".*:"; "")) | join(" ")' ${{ runner.temp }}/bake-meta.json)
            docker buildx imagetools create \
              ${image_tags} \
              ${image_digests}
          done

      - name: Inspect published images
        working-directory: ${{ runner.temp }}/digests
        run: |
          JSON_FILE=${{ runner.temp }}/digests/all.json
          for key in $(jq -r 'keys[]' "$JSON_FILE"); do
            image_name=$(jq -r ".\"$key\".name" "$JSON_FILE")
            docker buildx imagetools inspect ${image_name}:$(jq -r '.target."docker-metadata-action".args.DOCKER_META_VERSION' ${{ runner.temp }}/bake-meta.json)
          done
